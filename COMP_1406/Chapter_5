==========================================
==Chapter_5 Problem solving with objects==
==========================================

Paradigm
-a model

Programming Paradigm
-refers ti the design used byi a programmer to solve a problem]
-a fundementak style or programmer
ex
imparrative, procedual, object oreintated

imparrative
-uses statments(commands) to change the programs state
-the state is all the stored data at a given instance of time
-program incrementally changes state over time from an initial state to  an end/goal state

Procedual Programming
-is a form of imperative programming that useds procedures (rutines, sub-rutines, functions)

Object orientated programming
-is beases on the concepte of an objects, which has both a state and a behavior
-OOP is trying to simultae the behaviour of a system by modelling the diffrent objects in the system and how they interact with eachother
-an OO program consistes of objects that interat with eachother


Class bassed OOP
-A class is the blueprint or template tha defines (state) and the proceduares (behaviour) an object can have
-Objects are instatiiantions of the class

Behaviour of an object
-called methods

two important thigs of OOP
-Encapsulation - an onjects state and behaviour are both contained in the objecdt itself
-Data Hiding   - the attribute of an object should be hidden from code outside

Public and Private data
-Public can be accesed from any where
-private can only be acceses throught the class

Access modifiers : resrtic access to object members and methods
Public: attributes and methods can be accessed by anything that can see the class
Private : arributes and methods can be accessed only by things inside the class

Data Hidding
-make your data private so that outside class has no access
-have public get/set methods

Interface describes what an object can do and the implemntation refers to how it will be done


C++ a struct is pretty much like a class
-evert thing by default is public

C++ a class
-everything my defualt is private

C++ functions can be free functions
-functions that are not inside of a class